1. Typed column definitions using ColumnDef<T>
Guide: Define your column schema using `key`, `header`, `sortable`, etc.
Example:
  { key: 'name', header: 'Name', sortable: true }

2. Column-based sorting (ascending/descending toggle)
Guide: Click on column headers marked as sortable to sort data.
Example: Set `sortable: true` in column def <ColumnDef>.
Example:  {
            key: 'sub_no',
            header: 'Subscriber Number',
            sortable: true, <<---
            filter: 'input',
          }

3. Filtering
3(a). Global text filtering (search across all columns)
Guide: Enable `inputFilter={true}` to show a search box above the grid.
Example: `<CustomDataGrid inputFilter={true} />`

3(b). Column-level filtering (input, singleSelect, multiSelect, date & dateRange)
Guide: Use `filter` and `filterParams` in column def.
Example 'singleSelect':
  { key: 'status', header: 'Status', filter: 'singleSelect' }
Example 'multiSelect':
  - Define params (data mapping): 
  const subNoOptions = useMemo(
        () =>
            Array.from(
                new Set(
                    subscribers
                        .map(s => s.accounts?.account_master)
                        .filter((v): v is string => typeof v === "string")
                )
            ),
        [subscribers]
    );
  - Apply on column def:
  {
      key: 'accounts',
      header: 'Account Master',
      sortable: true, render: (row) => row.accounts?.account_master ?? '—',
      filter: 'multiSelect',
      filterParams: { options: subNoOptions }
  },

3(c). Intelligent filter reset when no options selected
Guide: When no checkboxes are checked, the filter is removed, restoring the full dataset.

3(d). Global columns visibility (show/hide)
Explain: Provide multi selection option of columns visibility if enabled
Example:
  <CustomDataGrid
      data={filteredSubscribers}
      columns={columns}
      pageSize={10}
      pagination={true}
      rowSelection={rowSelection}
      rowExpandable={rowExpandable}
      inputFilter={true}
      columnsVisibleOption={true} <<--
      rowClass={rowClass}
  />

3(e). Column-level visibility
Guide: To be applied on cloumn def by option true | false
Example:
  {
      key: 'accounts',
      header: 'Account Master',
      sortable: true, render: (row) => row.accounts?.account_master ?? '—',
      filter: 'multiSelect',
      columnVisible: true, <<---
      filterParams: { options: masterAcOpt }
  }

4. Row Selection
7(a). rowSelection config support
Guide: Enable row selection by `rowSelection={{ enabled: true }}`.
You can also supply `getRowId` and `onSelect` callback.

4(b). Select all / deselect all checkbox in header
Guide: When `rowSelection` is enabled, header checkbox toggles all current page rows.

4(c). Indeterminate checkbox state when partially selected
Guide: Automatically shown when some but not all visible rows are selected.

4(d). Row highlighting when selected
Guide: Applied automatically when row is selected.

5. Row Expandable / Nested Row
8(a). rowExpandable config support
Guide: Provide `rowExpandable={{ enabled: true, render: row => (...) }}`.

5(b). FontAwesome icons (+/−) to toggle expansion
Guide: FontAwesome plus/minus toggles beside each row.

5(c). Expandable content spans full width (exclude utility column)
Guide: Uses colspan to stretch the expanded content across all columns.
Example application:
  const rowExpandable = {
        enabled: true,
        render: (row: Subscriber) => (
            <div className="flex text-sm">
                {/* First Column: Contract Information */}
                <div className="w-1/4 pr-4 border-r border-gray-300">
                    {row.accounts?.contract && (
                        <>
                            <h4 className="font-bold underline underline-offset-2">Contract Information</h4>
                            <p><strong>Contract No:</strong> {row.accounts.contract.contract_no}</p>
                            <p><strong>Product Type:</strong> {row.accounts.contract.product_type}</p>
                            <p><strong>Start Date:</strong> {new Date(row.accounts.contract.contract_start_date).toLocaleDateString()}</p>
                            <p><strong>End Date:</strong> {new Date(row.accounts.contract.contract_end_date).toLocaleDateString()}</p>
                            <p><strong>Duration:</strong> {row.accounts.contract.duration}</p>
                            <p><strong>Plan:</strong> {row.accounts.contract.plan}</p>
                            <p><strong>Status:</strong> {row.accounts.contract.status}</p>
                            <p><strong>Vendor:</strong> {row.accounts.contract.vendor.vendor_name}</p>
                            <p><strong>Price:</strong> {row.accounts.contract.price}</p>
                        </>
                    )}
                </div>

                {/* Second Column: Edit Button */}
                <div className="w-full pl-4 flex items-start justify-start">
                    <button
                        className="px-4 py-1 border-2 border-amber-600 rounded-sm hover:bg-amber-600 hover:text-white transition duration-200"
                        onClick={() => console.log(`Edit contract for ID: ${row.id}`)}
                    >
                        Edit
                    </button>
                </div>
            </div>
        ),
    };

    <CustomDataGrid
                data={filteredSubscribers}
                columns={columns}
                pageSize={10}
                pagination={true}
                rowSelection={rowSelection}
                rowExpandable={rowExpandable} <<--
                inputFilter={false}
                rowClass={rowClass}
            />

5(d). Expandable state retained per row
Guide: Internal state managed per row index or row key.

6. Styling
6(a). Tailwind CSS-based layout and components, support dark-mode with custom theme.
Guide: All layout/styling use Tailwind utility classes.

6(b). Predefined theme

6(c). Zebra striping with even:bg-gray-50
Guide: Applied on even rows using Tailwind.

6(d). Hover highlight with hover:bg-amber-100
Guide: Applied to each row on hover.

6(e). Custom column cell styling with colClass and colClassParams
Guide: Pass static or dynamic class name functions for each column.
Example: 
  {
      key: 'account_sub',
      header: 'Sub Account',
      sortable: true,
      filter: 'input',
      colClassParams: (row: Subscriber) =>
          ["57", "07"].some(suffix => row.account_sub.endsWith(suffix)) ? "italic" : "",
  },

6(f). Row styling via rowClass function
Guide: Pass a function to `rowClass={row => ...}` to apply dynamic row classes.
Example: 
  const rowClass = (row: Subscriber) => {
        //if (row.sub_no.startsWith("013")) return "bg-pink-300 dark:bg-pink-800";
        if (row.status === "terminated") return "bg-red-300 dark:bg-red-800";
        //if (row.sub_no.startsWith("014")) return "bg-green-300 dark:bg-green-800";
        return "";
    };

    <CustomDataGrid
                data={filteredSubscribers}
                columns={columns}
                pageSize={10}
                pagination={true}
                rowSelection={rowSelection}
                rowExpandable={rowExpandable}
                inputFilter={false}
                rowClass={rowClass} <<--
            />

6(g). Sticky header and footer layout
Guide: `<thead>` is sticky at the top, footer shows entry summary at the bottom.

6(h). Customizable column width (resizable with drag handle)
Guide: Drag column borders to resize width.

6(i). Auto-resize column to fit content on double-click
Guide: Double-click resizer to auto-fit based on cell content.

6(j). Auto-column sizing that fit content on page/grid rendered.

6(k). Horizontal scrolling support on small screens
Guide: Table scrolls horizontally with overflow-x-auto and min-w.

6(l). Column & Row highlighting when hover on cell
Example:
  <CustomDataGrid
      data={filteredSubscribers}
      columns={columns}
      pageSize={10}
      pagination={true}
      rowSelection={rowSelection}
      rowExpandable={rowExpandable}
      inputFilter={true}
      columnsVisibleOption={true}
      rowClass={rowClass}
      dataExport={true}
      rowColHighlight={true} <<--
  />

7. Pagination
7(a). Optional pagination support
Guide: Use `pagination={true}` and specify `pageSize`.
Example: `<CustomDataGrid pagination={true} pageSize={10} />`

7(b). Non-paginated scrollable mode
Guide: Set `pagination={false}` to show all rows in a scrollable container.
Example: `<CustomDataGrid pagination={false} />`

8. Data rendering
8(a). Support rendering to populate custom data including styling.
Example 1:
  {
        key: 'status',
        header: 'Status',
        sortable: true,
        filter: 'singleSelect',
        colClass: "uppercase",
        render: (row) => (
            <span
                className={`px-2 py-1 rounded-full text-xs font-semibold
              ${row.status.toLowerCase() === 'active' ? 'bg-green-200 text-green-800 dark:bg-green-700 dark:text-white'
                        : row.status.toLowerCase() === 'terminated' ? 'bg-red-600 text-white dark:bg-red-700 dark:text-white'
                            : 'bg-gray-200 text-gray-800 dark:bg-gray-600 dark:text-white'}
            `}
            >
                {row.status}
            </span>
        )
    }

Example 2:
  { 
      key: 'registered_date',
      header: 'Register Date',
      sortable: true,
      render: (row) => new Date(row.registered_date).toLocaleDateString()
  }


9. Data Export
Guide: Enabling data export to excel, csv & pdf
Example: 
  <CustomDataGrid
      data={filteredSubscribers}
      columns={columns}
      pageSize={10}
      pagination={true}
      rowSelection={rowSelection}
      rowExpandable={rowExpandable}
      inputFilter={true}
      columnsVisibleOption={true}
      rowClass={rowClass}
      dataExport={true}
  />

10. rowDoubleClicked
Example:
const [selectedUser, setSelectedUser] = useState<User | null>(null);

<CustomDataGrid
    data={filteredUsers}
    columns={columns}
    pageSize={10}
    pagination={true}
    inputFilter={false}
    theme={gridTheme}
    onRowDoubleClick={(row) => setSelectedUser(row)}
/>

{selectedUser && (
    <div className="fixed top-0 right-0 w-80 h-full bg-white shadow-lg p-4 border-l border-gray-300 z-50 overflow-auto">
        <h2 className="text-lg font-semibold mb-2">User Details</h2>
        <pre className="text-sm whitespace-pre-wrap break-words">
            {JSON.stringify(selectedUser, null, 2)}
        </pre>
        <button
            className="mt-4 px-3 py-1 text-sm bg-gray-200 hover:bg-gray-300 rounded-sm"
            onClick={() => setSelectedUser(null)}
        >
            Close
        </button>
    </div>
)}


:To Added

32. theme compact/normal/large > implemented sm, md, lg on 8 may 2025

33. add 3 dots on column header to display custom columns option

34. columns reorder by drag column

37. rowSelection by single clicked on row. will also checked the checkbox


const gridTheme = {
  layouts: {
    gridSize: 'sm' | 'md' | 'xl',
    colBorder: {
      enabled: true | false
    }
  },
  headerClass: 'bg-slate-100 dark:bg-slate-800 dark:text-dark-light',
  rowStriping: {
    enabled: true | false,
    rowStripingClass: 'bg-gray-50 dark:bg-gray-500',
  },
  rowColHighlight: {
    enabled: false | true,
    rowClass: 'bg-amber-100',
    rowCellClass: 'font-bold',
    colClass: 'bg-amber-100',
    colCellClass: 'font-bold',
    centerCellClass: 'font-extrabold'
  }
}
